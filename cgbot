#!/usr/bin/env node
/*!
 * Copyright (c) 2020 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

const cgbot = require('.');
const fsp = require('fs').promises;

// ignore self-signed TLS cert
const process = require('process');
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';

// run the program
main();

async function main() {
  require('yargs')
    .usage('Usage: $0 <command>')
    .option('verbose', {
      describe: 'Provide verbose logging',
      alias: 'v',
      boolean: true
    })
    .option('config', {
      describe: 'Connection configuration file',
      alias: 'c'
    })
    .alias('h', 'help')
    .help('help', 'Show help for cborld command.')
    .demandOption('config')
    .command('monitor', 'Monitors the meeting server XMPP channels.',
      yargs => {
        yargs
          .example([
            ['$0 monitor -c /etc/cgbot/ccg.cfg',
              'Monitors using the configuration information provided.']
          ]);
      }, monitorCommand)
    .command('manage', 'Manage a specific XMPP and IRC channel.',
      yargs => {
        yargs
          .example([
            ['$0 manage -c /etc/cgbot/ccg.cfg --channel weekly',
              'Manages using the configuration information provided.']
          ]);
      }, manageCommand)
    .argv;
}

// Yargs command to monitor
async function monitorCommand(args) {
  try {
    const config = JSON.parse(await fsp.readFile(args.config));
    console.log('Monitoring...', config);
    await cgbot.monitor(config);
  } catch(e) {
    console.error(e.stack);
    process.exit(1);
  }
}

// Yargs command to manage
async function manageCommand(args) {
  try {
    const config = JSON.parse(await fsp.readFile(args.config));
    console.log('Managing...', config);
    await cgbot.manage(config);
  } catch(e) {
    console.error(e.stack);
    process.exit(1);
  }
}
