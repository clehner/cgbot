#!/usr/bin/env node
/*!
 * Copyright (c) 2020 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

const cgbot = require('.');
const fsp = require('fs').promises;

// ignore self-signed TLS cert
const process = require('process');
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';

// run the program
main();

async function main() {
  require('yargs')
    .usage('Usage: $0 <command>')
    .option('verbose', {
      describe: 'Provide verbose logging',
      alias: 'v',
      boolean: true
    })
    .option('config', {
      describe: 'Connection configuration file',
      alias: 'c'
    })
    .alias('h', 'help')
    .help('help', 'Show help for cborld command.')
    .demandOption('config')
    .command('monitor', 'Monitors the meeting server XMPP channels.',
      yargs => {
        yargs
          .example([
            ['$0 -c /etc/cgbot/ccg.cfg monitor',
              'Monitors using the configuration information provided.']
          ]);
      }, monitorCommand)
    .command('manage', 'Manage a specific XMPP and IRC channel.',
      yargs => {
        yargs
          .option('meeting', {
            describe: 'The meeting to manage.',
            alias: 'm'
          })
          .demandOption('meeting')
          .example([
            ['$0 -c /etc/cgbot/ccg.cfg manage --meeting weekly',
              'Manages a meeting using the provided config.']
          ]);
      }, manageCommand)
    .demandCommand(1, 'You need to specify a command.')
    .argv;
}

// Yargs command to monitor
async function monitorCommand(args) {
  try {
    const config = JSON.parse(await fsp.readFile(args.config));
    const meetings = Object.keys(config.meetings).join(', ');
    const domain = config.xmppOptions.domain;
    console.log(`Monitoring ${domain} for meetings: ${meetings}.`);
    await cgbot.monitor(config);
  } catch(e) {
    console.error(e.stack);
    process.exit(1);
  }
}

// Yargs command to manage
async function manageCommand(args) {
  try {
    const config = JSON.parse(await fsp.readFile(args.config));
    const domain = config.xmppOptions.domain;
    const meeting = args.meeting;
    if(!config.meetings[meeting]) {
      console.error(`Unknown meeting '${meeting}' in ${args.config}.`);
      process.exit(1);
    }

    console.log(`Managing https://${domain}/${meeting}.`);
    await cgbot.manage({meeting: args.meeting, ...config});
  } catch(e) {
    console.error(e.stack);
    process.exit(1);
  }
}
